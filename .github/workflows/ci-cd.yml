# üöÄ CI/CD Pipeline for FreeGamesScout Backend
# This workflow handles Continuous Integration and Continuous Deployment
# 
# Learning Points:
# - Triggers on push to main branch and pull requests
# - Runs tests in Node.js environment
# - Builds and tests Docker container
# - Deploys to Azure using Azure Developer CLI (azd)
# - Uses GitHub secrets for secure credential management

name: CI/CD Pipeline

# üìÖ When should this workflow run?
on:
  # Trigger on push to main branch (production deployments)
  push:
    branches: [ main ]
  
  # Trigger on pull requests to main (testing before merge)
  pull_request:
    branches: [ main ]
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

# üèóÔ∏è Define jobs that will run
jobs:
  # Job 1: Test the application
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the code
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Node.js environment
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    # Step 3: Install dependencies
    - name: üì• Install dependencies
      run: npm ci
    
    # Step 4: Run security audit
    - name: üîí Security audit
      run: npm audit --audit-level high
    
    # Step 5: Run scraping tests (in headless mode)
    - name: üß™ Test scraping functionality
      run: |
        # Install Chrome for testing
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        
        # Set environment variables for headless testing
        export HEADLESS=true
        export CHROME_BIN=/usr/bin/chromium-browser
        
        # Run our scraping tests
        node backend/test/scraping-test.js
      env:
        MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}

  # Job 2: Build and test Docker container
  docker-test:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Build Docker image
      run: docker build -t freegamesscout-backend-test .
    
    - name: üß™ Test Docker container
      run: |
        # Test that container builds and runs
        docker run --rm -d --name test-container \
          -e HEADLESS=true \
          -e CHROME_BIN=/usr/bin/chromium \
          -e MONGO_CONNECTION_STRING="${{ secrets.MONGO_CONNECTION_STRING }}" \
          -p 3000:5500 \
          freegamesscout-backend-test
        
        # Wait for container to start
        sleep 10
        
        # Test that the API responds
        curl -f http://localhost:3000/api/games || exit 1
        
        # Stop the test container
        docker stop test-container

  # Job 3: Deploy to Azure (only on main branch)
  deploy:
    name: üöÄ Deploy to Azure
    runs-on: ubuntu-latest
    needs: [test, docker-test]  # Only run if both test jobs pass
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    # Step 1: Login to Azure
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Step 2: Install Azure Developer CLI
    - name: üì¶ Install Azure Developer CLI
      run: |
        curl -fsSL https://aka.ms/install-azd.sh | bash
        echo "${HOME}/.azd/bin" >> $GITHUB_PATH
    
    # Step 3: Set up azd environment
    - name: ‚öôÔ∏è Configure azd environment
      run: |
        # Create azd environment
        azd env new freegamesscout-prod --no-prompt
        
        # Set environment variables
        azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azd env set AZURE_LOCATION ${{ vars.AZURE_LOCATION || 'eastus' }}
        azd env set MONGO_CONNECTION_STRING "${{ secrets.MONGO_CONNECTION_STRING }}"
      env:
        AZD_INITIAL_ENVIRONMENT_CONFIG: freegamesscout-prod
    
    # Step 4: Deploy to Azure
    - name: üöÄ Deploy to Azure
      run: |
        azd up --no-prompt
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_LOCATION: ${{ vars.AZURE_LOCATION || 'eastus' }}
        MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
    
    # Step 5: Get deployment URL and test
    - name: ‚úÖ Verify deployment
      run: |
        # Get the deployment URL from azd
        BACKEND_URL=$(azd env get-values | grep BACKEND_URL | cut -d'=' -f2 | tr -d '"')
        echo "Deployed to: $BACKEND_URL"
        
        # Test the deployed API
        sleep 30  # Wait for deployment to be fully ready
        curl -f "$BACKEND_URL/api/games" || exit 1
        
        echo "‚úÖ Deployment successful and verified!"