# Azure Deployment Plan for freegamesscout-backend Project

## **Goal**
Deploy a Node.js web scraping backend application to Azure Container Apps using Azure Developer CLI (azd) with full infrastructure provisioning.

## **Project Information**
**FreeGamesScout Backend**  
- **Stack**: Node.js 18 + Express.js with ES Modules
- **Type**: Web scraping API with scheduled cron jobs (Epic, Steam, GOG, Prime Gaming)
- **Database**: MongoDB Atlas (external connection)
- **Containerization**: Dockerfile created (includes Chrome for Selenium)
- **Dependencies**: External MongoDB Atlas database
- **Hosting**: Azure Container Apps
- **Scheduling**: node-cron for daily scraping at 11:01 AM EST

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Azure Subscription"
        subgraph "Resource Group"
            ACA[Azure Container Apps<br/>freegamesscout-backend]
            ACR[Azure Container Registry<br/>Image Storage]
            AI[Application Insights<br/>Monitoring]
            LA[Log Analytics Workspace<br/>Logs & Metrics]
            MI[User-Assigned Managed Identity<br/>Security]
        end
    end
    
    subgraph "External"
        MONGO[MongoDB Atlas<br/>Database]
        CHROME[Chrome Browser<br/>Selenium WebDriver]
    end
    
    ACA --> MONGO
    ACA --> CHROME
    ACR --> ACA
    AI --> ACA
    LA --> ACA
    MI --> ACA
    MI --> ACR
```

- The container app pulls its Docker image from Azure Container Registry
- The app connects to external MongoDB Atlas database via connection string
- Application Insights and Log Analytics provide monitoring and logging
- User-Assigned Managed Identity provides secure access to ACR
- Chrome browser runs headlessly inside the container for web scraping

## **Recommended Azure Resources**

**Application freegamesscout-backend:**
- **Hosting Service Type**: Azure Container Apps
- **SKU**: Consumption plan (0.25 vCPU, 0.5 Gi memory) - suitable for scheduled jobs with burst capability
- **Configuration**:
    - **Language**: nodejs
    - **Environment Variables**: 
        - `MONGO_CONNECTION_STRING` (from MongoDB Atlas)
        - `PORT` (default: 5500)
        - `NODE_ENV` (production)
    - **dockerFilePath**: `/Users/yashbeladiya/Games/App/freegamesscout-backend/Dockerfile`
    - **dockerContext**: `/Users/yashbeladiya/Games/App/freegamesscout-backend`
- **Dependencies Resource**: External MongoDB Atlas (no Azure dependencies)

## **Recommended Supporting Services**:
- **Application Insights**: Performance monitoring and error tracking
- **User-Assigned Managed Identity**: Secure access to Azure resources
- **Log Analytics Workspace**: Centralized logging for Container Apps
- **Container Registry**: Store and manage Docker images

## **Recommended Security Configurations**:
- User-Assigned Managed Identity must have **AcrPull** role ("7f951dda-4ed3-4680-a7ca-43fe172d538d") assigned to the container registry
- User-Assigned Managed Identity must be assigned to the Container App
- MongoDB connection string stored as secure environment variable
- Container runs as non-root user for security

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

**Execution Steps:**
1. **Provision Azure Infrastructure with AZD:**
    - [ ] Provisioning tool: AZD. Expected files: `azure.yaml`, `infra/main.bicep`, `infra/main.parameters.json`
    - [ ] Get current subscription ID and check region availability using `appmod-get-regions-with-sufficient-quota`
    - [ ] Generate missing expected files using `appmod-get-iac-rules` for best practices
    - [ ] Validate generated files using `get_errors` tool
    - [ ] Run `azd provision --preview --no-prompt` for dry run validation
    - [ ] Fix any bicep errors and retry until provisioning files are error-free

2. **Environment Setup for AZD:**
    - [ ] Install AZ CLI and AZD if not installed
    - [ ] Run `azd env new freegamesscout-env --no-prompt` to create environment
    - [ ] Set required environment variables using `azd env set`:
        - `AZURE_SUBSCRIPTION_ID`
        - `MONGO_CONNECTION_STRING` (user provided)
        - `AZURE_LOCATION` (selected region)
    - [ ] Use default subscription for deployment
    - [ ] Verify resource group will be created in infrastructure

3. **Containerization:**
    - [x] Dockerfile exists at `./Dockerfile` (includes Node.js 18 + Chrome for Selenium)
    - [x] .dockerignore exists at `./.dockerignore`
    - [ ] Validate Docker build locally: `docker build -t freegamesscout-backend .`

4. **Deployment:**
    - [ ] **AZD App Deployment**: Run `azd up --no-prompt` and iterate on errors
    - [ ] If region issues occur, run `azd down --force --no-prompt` and retry with different region
    - [ ] **Deployment Validation**: Verify app is running and endpoints are accessible

5. **Summarize Deployment Result:**
    - [ ] Use `appmod-summarize-result` tool to create deployment summary
    - [ ] Generate `.azure/summary.copilotmd` with deployment details

## **Progress Tracking**
- Copilot must create and update `.azure/progress.copilotmd` after each step
- Progress should include:
  - ‚úÖ Completed tasks
  - üî≤ Pending tasks  
  - ‚ùå Failed tasks with error notes
- Example format:
  - [x] Containerization complete (Dockerfile found at ./Dockerfile)
  - [ ] Deployment in progress
    - Attempt 1 failed: ACR push error (unauthorized)
    - Fixed by regenerating deploy script with correct az acr login. Retrying...